plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
//	id "com.moowork.node" version "1.3.1"
}

//apply {
//	"com.moowork.node"
//}

group = 'com.trading'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' //OAuth2.0
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security' //security
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

	implementation 'org.springframework.boot:spring-boot-starter-batch' // batch


	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8' // Model mapper
	implementation 'org.springframework.boot:spring-boot-starter-mail' // Email
	implementation 'org.springframework.boot:spring-boot-starter-jdbc' // h2
	implementation 'com.google.code.gson:gson:2.10'		// gson
	implementation("com.auth0:java-jwt:3.16.0") //Jwt
	runtimeOnly 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'

	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor('org.projectlombok:lombok')

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation  'org.springframework.batch:spring-batch-test'
	testImplementation 'org.projectlombok:lombok:1.18.22' // lombok

	//https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
}

tasks.named('test') {
	useJUnitPlatform()
}
// ------------------ react start ---------------
def frontendDir = "$projectDir/src/reactfront"

sourceSets {
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "copyReactBuildFiles"
//	dependsOn "runReactServer"
}

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	//into "$buildDir/src/main/resources/static"
	into "$projectDir/src/main/resources/static"
}

// Jar 실행시 react 기동 -> server 기동
//task runReactServer(type: NpmTask) {
//	workingDir = file("$projectDir/src/reactfront");
//	args = ["run","start"];
//}
//
//bootRun.doFirst{
//	runReactServer
//}
